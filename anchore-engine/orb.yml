version: 2.1
description: anchore engine container security scanning

executors:
  anchore_engine:
    environment:
      ANCHORE_CLI_USER: "admin"
      ANCHORE_CLI_PASS: "foobar"
      ANCHORE_CLI_SSL_VERIFY: "n"
    machine: true

commands:
  install_ci_tools:
    description: |
      Downloads anchore_ci_tools.py and create symbolic link.
      Must be used on executor with anchore-cli installed.
    steps:
      - run:
          name: Install anchore CI tools
          command: |
            pip install --upgrade pip
            pip install anchorecli
            curl -o /tmp/anchore_ci_tools.py https://raw.githubusercontent.com/anchore/ci-tools/master/scripts/anchore_ci_tools.py
            chmod +x /tmp/anchore_ci_tools.py
            ln -s /tmp/anchore_ci_tools.py /home/circleci/bin/anchore_ci_tools

  add_private_registry:
    description: |
      Adds credentials for private registries to anchore engine.
      All parameters are required if using this command.
      Must run on executor with anchore-engine running & anchore-cli installed.
    parameters:
      registry_name:
        description: Name of private registry.
        type: string
        default: "docker.io"
      registry_user:
        description: Username for private registry (use env var to populate).
        type: string
        default: "dockerhub_user"
      registry_pass:
        description: Password for private registry (use env var to populate).
        type: string
        default: "mysecretpassword"
    steps:
      - run:
          name: Add private registry credentials to anchore engine.
          command: anchore-cli registry add << parameters.registry_name >> << parameters.registry_user >> << parameters.registry_pass >> --skip-validate

  analyze_image:
    description: |
      Add image to anchore engine and start analyzing.
      image_name is required, timeout is optional.
      Must run on executor with anchore_ci_tools.py installed.
    parameters:
      image_name:
        description: Image repository & tag.
        type: string
      timeout:
        description: Timeout used for Anchore Engine image scanning.
        type: string
        default: "300"
    steps:
      - run:
          name: Analyze image with anchore engine.
          command: anchore_ci_tools --analyze --report --image << parameters.image_name >> --timeout << parameters.timeout >>

  setup_anchore_engine:
    description: Setup anchore-engine with docker compose
    steps:
      - run:
          name: Install docker-compose
          command: pip install --upgrade docker-compose
      - run:
          name: Start anchore engine.
          command: |
            curl -o docker-compose.yaml https://raw.githubusercontent.com/anchore/anchore-engine/master/scripts/docker-compose/docker-compose.yaml
            sed -i 's|postgres:9|anchore/engine-db-preload:latest|' docker-compose.yaml
            mkdir config db
            curl -o config/config.yaml https://raw.githubusercontent.com/anchore/anchore-engine/master/scripts/docker-compose/config.yaml
            docker-compose up -d
            printf "\n%s\n" "Waiting for anchore engine to start..."
            anchore_ci_tools --wait

  analyze_local_image:
    description: |
      Due to the functionality of anchore engine, images must be pulled from a
      registry. This command pushes a local image to a temporary registry container.
      Then scans the image with anchore engine. Stores all reports as artifacts.
    parameters:
      image_name:
        description: Image repository & tag.
        type: string
      timeout:
        description: Timeout used for Anchore Engine image scanning.
        type: string
        default: "300"
      analysis_fail:
        description: Set to True if pipeline should stop on a failed image analysis.
        type: boolean
        default: False
    steps:
      - run:
          name: Install anchore CI tools
          command: |
            pip install --upgrade pip
            pip install --upgrade anchorecli
            curl -o /tmp/anchore_ci_tools.py https://raw.githubusercontent.com/anchore/ci-tools/master/scripts/anchore_ci_tools.py
            chmod +x /tmp/anchore_ci_tools.py
            ln -s /tmp/anchore_ci_tools.py /home/circleci/bin/anchore_ci_tools
      - run:
          name: Setup anchore engine.
          command: |
            pip install --upgrade docker-compose
            curl -o docker-compose.yaml https://raw.githubusercontent.com/anchore/anchore-engine/master/scripts/docker-compose/docker-compose.yaml
            sed -i 's|postgres:9|anchore/engine-db-preload:latest|' docker-compose.yaml
            cat \<< EOF \>> docker-compose.yaml

              anchore-registry:
                image: "registry:latest"
                ports:
                - "5000:5000"
            EOF
            mkdir config db
            curl -o config/config.yaml https://raw.githubusercontent.com/anchore/anchore-engine/master/scripts/docker-compose/config.yaml
            docker-compose up -d
            printf "\n%s\n" "Waiting for anchore engine to start..."
            anchore_ci_tools --wait
      - run:
          name: Push local image to temporary registry container.
          command: |
            echo "127.0.0.1 anchore-registry" | sudo tee -a /etc/hosts > /dev/null
            docker tag << parameters.image_name >> anchore-registry:5000/<< parameters.image_name >>
            docker push anchore-registry:5000/<< parameters.image_name >>
      - run:
          name: Analyze image with anchore engine.
          command: anchore_ci_tools --analyze --report --image anchore-registry:5000/<< parameters.image_name >> --timeout << parameters.timeout >>
      - when:
          condition: << parameters.analysis_fail >>
          steps:
            - anchore-cli evaluate check << parameters.image_name >>
      - store_artifacts:
          path: anchore-reports

jobs:
  image_scan:
    executor: anchore_engine
    description: |
      Performs a static security analysis of docker container with anchore engine.
      Anchore engine pulls image from public/private docker registries.
      Requires registry credentials to access private images.
    parameters:
      image_name:
        description: Image repository & tag.
        type: string
      private_registry:
        description: Set to True if image is only accessible from a private registry.
        type: boolean
        default: False
      registry_name:
        description: Name of private registry (eg - docker.io)
        type: string
        default: "docker.io"
      registry_user:
        description: Username for private registry (use env var to populate).
        type: string
        default: "dockerhub_username"
      registry_pass:
        description: Password for private registry (use env var to populate).
        type: string
        default: "mysecretpassword"
      timeout:
        description: Timeout used for Anchore Engine image scanning.
        type: string
        default: "300"
    steps:
      - install_ci_tools
      - setup_anchore_engine
      - when:
          condition: << parameters.private_registry >>
          steps:
            - add_private_registry:
                registry_name: << parameters.registry_name >>
                registry_user: << parameters.registry_user >>
                registry_pass: << parameters.registry_pass >>
      - analyze_image:
          image_name: << parameters.image_name >>
          timeout: << parameters.timeout >>
      - store_artifacts:
          path: anchore-reports
